From 82704afcb686bd28f3790467fb0bd51970d7aa7a Mon Sep 17 00:00:00 2001
From: Vanessa Maegima <vanessa.maegima@nxp.com>
Date: Wed, 24 Jul 2019 14:36:31 -0300
Subject: [PATCH 1/3] bd70528: Add RTC Read functions

Enable RTC and Alarm reads.

Signed-off-by: Vanessa Maegima <vanessa.maegima@nxp.com>
---
 components/bd70528/bd70528.c | 147 +++++++++++++++++++++++++++++++++++
 components/bd70528/bd70528.h |  82 +++++++++++++++++++
 2 files changed, 229 insertions(+)

diff --git a/components/bd70528/bd70528.c b/components/bd70528/bd70528.c
index fc4d273..eb31a4b 100644
--- a/components/bd70528/bd70528.c
+++ b/components/bd70528/bd70528.c
@@ -22,6 +22,9 @@
 #define BD70528_REGULATOR_ON_ULP_MASK	(0x40U)
 #define BD70528_REGULATOR_LP_MASK		(0x10U)
 
+#define bcd2bin(x)                      (((x) & 0x0f) + ((x) >> 4) * 10)
+#define bin2bcd(x)                      ((((x) / 10) << 4) + (x) % 10)
+
 /*******************************************************************************
  * Prototypes
  ******************************************************************************/
@@ -426,6 +429,150 @@ uint32_t BD70528_GetRegulatorOutputVoltage(bd70528_handle_t *handle,
     return voltage;
 }
 
+void BD70528_RTC_ConvertTime(rtc_time_t *rtc)
+{
+    rtc->sec &= 0x7F;
+    rtc->sec = bcd2bin(rtc->sec);
+
+    rtc->min &= 0x7F;
+    rtc->min = bcd2bin(rtc->min);
+
+    rtc->hour &= 0xBF;
+    rtc->hour = bcd2bin(rtc->hour);
+
+    rtc->week &= 0x07;
+
+    switch (rtc->week) {
+        case 0x0:
+            rtc->week_day = "Sunday";
+            break;
+        case 0x1:
+            rtc->week_day = "Monday";
+            break;
+        case 0x2:
+            rtc->week_day = "Tuesday";
+            break;
+        case 0x3:
+            rtc->week_day = "Wednesday";
+            break;
+        case 0x4:
+            rtc->week_day = "Thursday";
+            break;
+        case 0x5:
+            rtc->week_day = "Friday";
+            break;
+        case 0x6:
+            rtc->week_day = "Saturday";
+            break;
+        default:
+            break;
+    }
+
+    rtc->day &= 0x3F;
+    rtc->day = bcd2bin(rtc->day);
+
+    rtc->month &= 0x1F;
+    rtc->month = bcd2bin(rtc->month);
+
+    rtc->year = bcd2bin(rtc->year);
+
+    if (rtc->mask)
+        rtc->mask &= 0x7F;
+
+    if (rtc->repeat)
+        rtc->repeat &= 0x03;
+}
+
+bool BD70528_RTC_SetTime(bd70528_handle_t *handle, rtc_time_t *rtc)
+{
+    return kStatus_Success;
+}
+
+rtc_time_t BD70528_RTC_ReadTime(bd70528_handle_t *handle)
+{
+    assert(handle);
+
+    rtc_time_t rtc = {0};
+
+    BD70528_ReadReg(handle, BD70528_SEC, &rtc.sec);
+    BD70528_ReadReg(handle, BD70528_MIN, &rtc.min);
+    BD70528_ReadReg(handle, BD70528_HOUR, &rtc.hour);
+    BD70528_ReadReg(handle, BD70528_WEEK, &rtc.week);
+    BD70528_ReadReg(handle, BD70528_DAY, &rtc.day);
+    BD70528_ReadReg(handle, BD70528_MONTH, &rtc.month);
+    BD70528_ReadReg(handle, BD70528_YEAR, &rtc.year);
+
+    BD70528_RTC_ConvertTime(&rtc);
+
+    PRINTF("\n\rRTC date: %s %d/%d/%d", rtc.week_day, rtc.month, rtc.day, rtc.year);
+    PRINTF("\n\rRTC time: %d:%d:%d\n\r", rtc.hour, rtc.min, rtc.sec);
+
+    return rtc;
+}
+
+bool BD70528_RTC_SetAlarm(bd70528_handle_t *handle, rtc_time_t *rtc)
+{
+    return kStatus_Success;
+}
+
+rtc_time_t BD70528_RTC_ReadAlarm(bd70528_handle_t *handle)
+{
+    assert(handle);
+
+    rtc_time_t rtc = {0};
+
+    BD70528_ReadReg(handle, BD70528_ALM_SEC, &rtc.sec);
+    BD70528_ReadReg(handle, BD70528_ALM_MIN, &rtc.min);
+    BD70528_ReadReg(handle, BD70528_ALM_HOUR, &rtc.hour);
+    BD70528_ReadReg(handle, BD70528_ALM_WEEK, &rtc.week);
+    BD70528_ReadReg(handle, BD70528_ALM_DAY, &rtc.day);
+    BD70528_ReadReg(handle, BD70528_ALM_MONTH, &rtc.month);
+    BD70528_ReadReg(handle, BD70528_ALM_YEAR, &rtc.year);
+
+    BD70528_ReadReg(handle, BD70528_ALM_MASK, &rtc.mask);
+    BD70528_ReadReg(handle, BD70528_ALM_REPEAT, &rtc.repeat);
+
+    BD70528_RTC_ConvertTime(&rtc);
+
+    if (!rtc.repeat && !rtc.mask) {
+        PRINTF("\n\rRTC Alarm interrupt not set");
+    } else {
+        PRINTF("\n\rRTC Alarm: event occurs every ");
+
+        if (rtc.repeat) {
+            if (rtc.repeat & ALM_ONESEC)
+                PRINTF("second");
+            if (rtc.repeat & ALM_ONEMIN)
+                PRINTF("minute");
+        } else {
+            if (rtc.mask & ALM_MASK_YEAR)
+                PRINTF("%d year(s) ", rtc.year);
+            if (rtc.mask & ALM_MASK_MON)
+                PRINTF("%d month(s) ", rtc.month);
+            if (rtc.mask & ALM_MASK_DAY)
+                PRINTF("%d day(s) ", rtc.day);
+            if (rtc.mask & ALM_MASK_WEEK)
+                PRINTF("%s ", rtc.week_day);
+            if (rtc.mask & ALM_MASK_HOUR)
+                PRINTF("%d hour(s) ", rtc.hour);
+            if (rtc.mask & ALM_MASK_MIN)
+                PRINTF("%d minutes ", rtc.min);
+            if (rtc.mask & ALM_MASK_SEC) {
+                PRINTF("%d seconds", rtc.sec);
+            }
+        }
+    }
+
+    PRINTF("\n\r");
+
+    return rtc;
+}
+
+bool BD70528_RTC_EnableAlarm(bd70528_handle_t *handle)
+{
+    return kStatus_Success;
+}
+
 /*******************************************************************************
  * EOF
  ******************************************************************************/
diff --git a/components/bd70528/bd70528.h b/components/bd70528/bd70528.h
index 31fb26c..063c254 100644
--- a/components/bd70528/bd70528.h
+++ b/components/bd70528/bd70528.h
@@ -179,6 +179,69 @@
 #define BD70528_CHG_11_CONF			0x94U
 #define BD70528_CHG_12_CONF			0xC5U
 
+// RTC Masks
+#define S40                         1U << 6
+#define S20                         1U << 5
+#define S10                         1U << 4
+#define S8                          1U << 3
+#define S4                          1U << 2
+#define S2                          1U << 1
+#define S1                          1U
+
+#define M40                         1U << 6
+#define M20                         1U << 5
+#define M10                         1U << 4
+#define M8                          1U << 3
+#define M4                          1U << 2
+#define M2                          1U << 1
+#define M1                          1U
+
+#define H12_24                      1U << 7
+#define H20_PA                      1U << 5
+#define H10                         1U << 4
+#define H8                          1U << 3
+#define H4                          1U << 2
+#define H2                          1U << 1
+#define H1                          1U
+
+#define W4                          1U << 2
+#define W2                          1U << 1
+#define W1                          1U
+
+#define D20                         1U << 5
+#define D10                         1U << 4
+#define D8                          1U << 3
+#define D4                          1U << 2
+#define D2                          1U << 1
+#define D1                          1U
+
+#define MO10                        1U << 4
+#define MO8                         1U << 3
+#define MO4                         1U << 2
+#define MO2                         1U << 1
+#define MO1                         1U
+
+#define Y80                         1U << 7
+#define Y40                         1U << 6
+#define Y20                         1U << 5
+#define Y10                         1U << 4
+#define Y8                          1U << 3
+#define Y4                          1U << 2
+#define Y2                          1U << 1
+#define Y1                          1U
+
+// Alarm Masks
+#define ALM_MASK_YEAR               1U << 6
+#define ALM_MASK_MON                1U << 5
+#define ALM_MASK_DAY                1U << 4
+#define ALM_MASK_WEEK               1U << 3
+#define ALM_MASK_HOUR               1U << 2
+#define ALM_MASK_MIN                1U << 1
+#define ALM_MASK_SEC                1U
+
+#define ALM_ONEMIN                  1U << 1
+#define ALM_ONESEC                  1U
+
 /*! @brief BD70528 Operating Status definition. */
 typedef enum _bd70528_operating_status
 {
@@ -228,6 +291,21 @@ typedef struct _bd70528_config
     uint8_t slaveAddress;
 } bd70528_config_t;
 
+typedef struct _rtc_time
+{
+    uint8_t sec;
+    uint8_t min;
+    uint8_t hour;
+    uint8_t week;
+    char *week_day;
+    uint8_t day;
+    uint8_t month;
+    uint8_t year;
+    // alarm only
+    uint8_t mask;
+    uint8_t repeat;
+} rtc_time_t;
+
 /*******************************************************************************
  * API
  ******************************************************************************/
@@ -257,6 +335,10 @@ void BD70528_SetRegulatorOutputVoltage(bd70528_handle_t *handle, bd70528_module_
 uint32_t BD70528_GetRegulatorOutputVoltage(bd70528_handle_t *handle, bd70528_module_t module,
 			bd70528_operating_status_t status);
 
+rtc_time_t BD70528_RTC_ReadTime(bd70528_handle_t *handle);
+
+rtc_time_t BD70528_RTC_ReadAlarm(bd70528_handle_t *handle);
+
 #if defined(__cplusplus)
 }
 #endif
-- 
2.17.1

